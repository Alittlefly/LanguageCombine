#! user/bin/env python3#coding=utf-8import osfrom LanguageUtil.Csv_Reader import CsvReaderfrom LanguageUtil.OutPutWriter import IOSOutPutWriterfrom LanguageUtil.OutPutWriter import AndroidOutPutWiterfrom LanguageUtil.OutPutWriter import WebOutPutWriterfrom LanguageUtil.ReusltFormater import iOSResultFormaterfrom LanguageUtil.ReusltFormater import AndroidResultFormaterfrom LanguageUtil.ReusltFormater import WebResultFormaterfrom ExcelReader.FileReader import MyExcelReaderclass LanguagePaths:    def filepaths(self, list_name, path):        for file in os.listdir(path):            file = os.path.join(path,file)            if os.path.isdir(file):                self.filepaths(list_name,file)            else:                list_name.append(file)class LanguageCreater:    def __init__(self, lkey, keys):        self.lkey = lkey        self.keys = keys    def configCreatedDir(self, createddir):        self.createddir = createddir    def configCsvFiles(self, filePathDir):        self.filePathDir = filePathDir    def configCombinedDataDir(self, combinedDataDir):        self.combinedDataDir = combinedDataDir    def createAppUsedLanguageFileFromCsv(self,filePath):        '''        Desc Csv 文件是单表的 文件名字就是Csv的表格名字        :param filePath:        :return:        '''        fileName = os.path.basename(filePath)        fileDir = os.path.splitext(fileName)        fileNameWithoutExt = fileDir[0]        OutPutDir = self.createddir + '/' + fileNameWithoutExt        reader = CsvReader(filePath)        print('start :' + filePath)        keyValues = reader.fileInfos()        self.generateTempFiles(keyValues,OutPutDir)    def createAppUsedLanguageFileFromExcel(self,filePath):        '''        Desc Excel 表包含多个单表        :param filePath:        :return: 将Excel表中的表 组合成所需要的字典形式        '''        reader = MyExcelReader(filePath)        infos = reader.readExcel()        for tupleInfo in infos:            fileNameWithoutExt = tupleInfo[1]            OutPutDir = self.createddir + '/' + fileNameWithoutExt            KeyValues = tupleInfo[0]            self.generateTempFiles(KeyValues, OutPutDir)    def generateTempFiles(self,keyValues,OutPutDir):        '''        :param keyValues:  是文件处理的结果 结构是包含lkey 和 key 的字典的list        :param OutPutDir:  是当前文件输出的路径        :return: nil        '''        if len(keyValues) == 0:            return        lkey = self.lkey        keys = self.keys        print('--------------------ios-------------------------')        iosFormater = iOSResultFormater(lkey, keys)        iosWriter = IOSOutPutWriter(OutPutDir)        iosReuslts = iosFormater.formatResult(keyValues)        for dict in iosReuslts:            data = dict['data']            name = dict['name']            iosWriter.write(data, name)        print('--------------------android---------------------')        androidFromater = AndroidResultFormater(lkey, keys)        androidResults = androidFromater.formatResult(keyValues)        androidWriter = AndroidOutPutWiter(OutPutDir)        for dict in androidResults:            data = dict['data']            name = dict['name']            androidWriter.write(data, name)        print('--------------------web-------------------------')        webFromater = WebResultFormater(lkey, keys)        webResults = webFromater.formatResult(keyValues)        webWriter = WebOutPutWriter(OutPutDir)        for dict in webResults:            data = dict['data']            name = dict['name']            webWriter.write(data, name)    def creatAppUsedFilesWithDirs(self):        Files = []        LanguagePaths().filepaths(Files,self.filePathDir)        for path in Files:            if path.endswith('.csv'):                self.createAppUsedLanguageFileFromCsv(path)            elif path.endswith('.xlsx'):                self.createAppUsedLanguageFileFromExcel(path)    def groupsPaths(self, paths, ext):        group = []        for path in paths:            if path.endswith(ext):                group.append(path)        return group    def makecombinefile(self, filepaths, combineOutPutPath, ext):        keypaths = {}        for filepath in filepaths:            filename = os.path.basename(filepath)            filenamekey = os.path.splitext(filename)[0]            if not filenamekey in keypaths:                keypaths.setdefault(filenamekey)                keypaths[filenamekey] = []            filenamekeyvalues = keypaths[filenamekey]            filenamekeyvalues.append(filepath)            keypaths[filenamekey] = filenamekeyvalues        for key in keypaths.keys():            grouppaths = keypaths[key]            combinfilepath = combineOutPutPath + key + ext            if not os.path.exists(combinfilepath):                dirpath = os.path.dirname(combinfilepath)                if not os.path.exists(dirpath):                    os.makedirs(dirpath)            fo = open(combinfilepath, 'w')            for path in grouppaths:                # print(path)                pathkeyfile = open(path, 'r')                data = pathkeyfile.readlines()                fo.writelines(data)                pathkeyfile.close()            fo.close()    def combinIos(self):        print('-----------------------combin--------------------')        allfiles = []        LanguagePaths().filepaths(allfiles,self.createddir)        return allfiles    def creatCombinefile(self):        allfiles = self.combinIos()        iosExt = '.strings'        androidExt = '.xml'        webExt = '.properties'        iosPaths = self.groupsPaths(allfiles, iosExt)        androidPaths = self.groupsPaths(allfiles, androidExt)        webPaths = self.groupsPaths(allfiles, webExt)        iosCombinePath = self.combinedDataDir + '/iOS/'        androidCombinePath = self.combinedDataDir + '/Android/'        webCombinePath = self.combinedDataDir + '/Web/'        self.makecombinefile(iosPaths, iosCombinePath, iosExt)        self.makecombinefile(androidPaths, androidCombinePath, androidExt)        self.makecombinefile(webPaths, webCombinePath, webExt)        # 删除临时文件        # self.removeTempFiles(self.createddir)        print('--------------------多语言文件转换完成--------------------------')        print('-------请手动删除'+ self.createddir+ '下的临时文件------------------')    def removeTempFiles(self, path):        dirs = os.listdir(path)        for dir in dirs:            c_dir = os.path.join(path, dir)            if os.path.isdir(c_dir):                self.removeTempFiles(c_dir)            else:                print(c_dir)                # os.remove(c_dir)                # os.removedirs(path)